// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String?
  username  String   @unique
  email     String   @unique
  posts     Post[]
  profile   Profile?
  password String
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  Habit     Habit[]
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
  imgUrl String?
}

model Post {
  id        Int      @id @default(autoincrement())
  content   String
  userId    Int
  likes     Int      @default(0)
  author    User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now()) @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @db.Timestamptz(3)
}

model Habit {
  id          Int            @id @default(autoincrement())
  name        String
  time        String
  category    String
  description String?
  userId      Int
  author      User           @relation(fields: [userId], references: [id])
  Status      HabitTracker[]
}

model HabitTracker {
  id        Int      @id @default(autoincrement())
  date      DateTime @default(now()) @db.Timestamptz(3)
  habitId   Int @unique
  habit     Habit    @relation(fields: [habitId], references: [id])
  Completed Boolean  @default(false)
}

model CommitCounts {
  id   Int      @default(autoincrement())
  date DateTime @default(now()) @db.Timestamptz(3)
  userId Int @unique
  count Int @default(0)
}
